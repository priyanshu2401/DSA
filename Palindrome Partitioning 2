https://leetcode.com/problems/palindrome-partitioning-ii/description/


class Solution {
public: 
    bool palindrome(int i,int j,string& s)
    {
        while(i<j)
        {
            if(s[i]!=s[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    int solve(int i,int n,string& s,vector<int>& dp)
    {
        if(i>=n) return 0;
        if(dp[i]!=-1) return dp[i];
        int mini = INT_MAX;

        for(int x=i;x<n;x++)
        {
            int cuts = 0;
            if(palindrome(i,x,s)) 
            {
                cuts = solve(x+1,n,s,dp)+1;
                mini = min(mini,cuts);
            }
        }

        return dp[i] = mini;
    }
    int minCut(string s) {
        int n = s.size();
        vector<int> dp(n+1,-1);
        return solve(0,n,s,dp)-1;
    }
};
