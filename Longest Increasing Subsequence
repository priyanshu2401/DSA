https://leetcode.com/problems/longest-increasing-subsequence/description/


class Solution {
public:
    int solve(int i,int n,vector<int>& nums,int prev,vector<vector<int>>& dp)
    {
        if(i>=n) return 0;
        if(dp[i][prev+1]!=-1) return dp[i][prev+1];
        int pick=0,notpick=0;
        if(prev==-1 || nums[i]>nums[prev]) pick = solve(i+1,n,nums,i,dp)+1;
        notpick = solve(i+1,n,nums,prev,dp);
        return dp[i][prev+1] = max(pick,notpick);
    }

    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n+1,vector<int>(n+2,-1));
        return solve(0,n,nums,-1,dp);
    }
};
