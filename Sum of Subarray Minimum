https://leetcode.com/problems/sum-of-subarray-minimums/description/


class Solution {
public:
    typedef long long ll;
    int mod = 1e9+7;
    int sumSubarrayMins(vector<int>& arr) {
        vector<ll> left,right;
        stack<pair<int,int>> s;
        int ans = 0;
        for(int i=0;i<arr.size();i++)
        {
            while(!s.empty() && s.top().first>arr[i]) s.pop();
            if(s.empty()) left.push_back(-1);
            else left.push_back(s.top().second);
            s.push({arr[i],i});
        }
        while(!s.empty()) s.pop();

        for(int i=arr.size()-1;i>=0;i--)
        {
            while(!s.empty() && s.top().first>=arr[i]) s.pop();
            if(s.empty()) right.push_back(-1);
            else right.push_back(s.top().second);
            s.push({arr[i],i});
        }
        reverse(right.begin(),right.end());
        
        for(int i=0;i<arr.size();i++)
        {
            if(left[i]==-1) left[i] = i+1;
            else left[i] = i-left[i];
            if(right[i]==-1) right[i] = right.size()-i;
            else right[i] = right[i]-i;
        }

        for(int i=0;i<arr.size();i++) ans = (ans + arr[i]*left[i]*right[i])%mod;
        return ans;
    }
};
