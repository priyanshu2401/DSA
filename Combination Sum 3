https://leetcode.com/problems/combination-sum-iii/description/


class Solution {
public:
    vector<vector<int>> ans;

    void backtrack(int i,vector<int>& nums,int k,int target,vector<int>& temp,int n)
    {
        // cout<<"i = "<<i<<endl;
        // cout<<"k = "<<k<<endl;
        // cout<<"target = "<<target<<endl;
        // cout<<"temp = ";
        // for(auto &x: temp) cout<<x<<" ";
        // cout<<endl;
        // cout<<"---------------------------------"<<endl;
        if(i>n) return;
        if(target<0) return;
        if(i==n)
        {
            if(k==0)
            {
                if(target<0) return;
                if(target>0) return;
                if(target==0)
                {
                    ans.push_back(temp);
                    return;
                }
            }   
            else return;
        }

        if(nums[i] <=  target)
        {
            temp.push_back(nums[i]);
            backtrack(i+1,nums,k-1,target-nums[i],temp,n);
            temp.pop_back();
        }
        backtrack(i+1,nums,k,target,temp,n);
    }
    vector<vector<int>> combinationSum3(int k, int target) {
        vector<int> nums = {1,2,3,4,5,6,7,8,9};
        int n = 9;
        vector<int> temp;
        backtrack(0,nums,k,target,temp,n);
        return ans;
    }
};
