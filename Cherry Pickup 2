https://leetcode.com/problems/cherry-pickup-ii/description/


class Solution {
public:
    int solve(vector<vector<int>>& grid,int i,int j1,int j2,int m,int n,vector<vector<vector<int>>>& dp)
    {
        if(i>=m || j1<0 || j1>=n || j2<0 || j2>=n) return -1e7;
        if(i==m-1)
        {
            if(j1==j2) return grid[i][j1];
            return grid[i][j1] + grid[i][j2];
        } 
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];

        int maxi = INT_MIN;
        for(int dj1=-1;dj1<=1;dj1++)
        {
            for(int dj2=-1;dj2<=1;dj2++)
            {
                int step;
                if(j1==j2) step = solve(grid,i+1,j1+dj1,j2+dj2,m,n,dp) + grid[i][j1];
                else step=solve(grid,i+1,j1+dj1,j2+dj2,m,n,dp)+grid[i][j1]+grid[i][j2];
                maxi = max(maxi,step);
            }
        }

        return dp[i][j1][j2] = maxi;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<vector<int>>> dp(m+1,vector<vector<int>>(n+1,vector<int>(n+1,-1)));
        return solve(grid,0,0,n-1,m,n,dp);
    }
};
