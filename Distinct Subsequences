https://leetcode.com/problems/distinct-subsequences/description/


class Solution {
public:
    int solve(int i,int j,int m,int n,string& s,string &t,vector<vector<int>>& dp)
    {
        if(j>=n) return 1;
        if(i>=m) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[i]==t[j]) return dp[i][j] = solve(i+1,j,m,n,s,t,dp) + solve(i+1,j+1,m,n,s,t,dp);
        return dp[i][j] = solve(i+1,j,m,n,s,t,dp);
    }
    
    int helper(int m,int n,string& s,string& t)
    {
        vector<vector<double>> dp(m+1,vector<double>(n+1,0));
        for(int i=0;i<m+1;i++) dp[i][n]=1;
        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(s[i]==t[j]) dp[i][j] = dp[i+1][j] + dp[i+1][j+1];
                else dp[i][j] = dp[i+1][j];
            }
        }

        for(int i=0;i<m+1;i++)
        {
            for(int j=0;j<n+1;j++) cout<<dp[i][j]<<" ";
            cout<<endl;
        }
        return (int)dp[0][0];
    }
    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        // vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        // return solve(0,0,m,n,s,t,dp);
        return helper(m,n,s,t);
    }
};
