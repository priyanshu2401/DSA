https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/


class Solution {
public:
    int solve(int i,int j,int n,string& s,string& t,vector<vector<int>>& dp)
    {
        if(i>=n || j>=n) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[i]==t[j]) return dp[i][j] = solve(i+1,j+1,n,s,t,dp) + 1;
        return dp[i][j] = max(solve(i+1,j,n,s,t,dp),solve(i,j+1,n,s,t,dp));
    }
    int minInsertions(string s) {
        int n = s.length();
        string t="";
        for(int i=n-1;i>=0;i--) t+=s[i];
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return n - solve(0,0,n,s,t,dp);
    }
};
