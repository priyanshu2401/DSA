https://leetcode.com/problems/minimum-falling-path-sum/description/


class Solution {
public:
    int solve(vector<vector<int>>& matrix,int i,int j,int n,vector<vector<int>>& dp)
    {
        if(i>=n || j<0 || j>=n) return 100001;
        if(i==n-1) return matrix[i][j];
        if(dp[i][j]!=INT_MAX) return dp[i][j];

        int a = solve(matrix,i+1,j-1,n,dp) + matrix[i][j];
        int b = solve(matrix,i+1,j,n,dp) + matrix[i][j];
        int c = solve(matrix,i+1,j+1,n,dp) + matrix[i][j];

        return dp[i][j] = min(a,min(b,c));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,INT_MAX));
        int mini = INT_MAX;
        for(int i=0;i<n;i++) mini = min(mini,solve(matrix,0,i,n,dp));
        return mini;
    }
};
