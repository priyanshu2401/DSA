https://leetcode.com/problems/house-robber/


class Solution {
public:
    int solve(vector<int>& nums,int i,int n,vector<int> &dp)
    {
        if(i >= n) return 0;
        if(dp[i]!=-1) return dp[i];

        int pick = solve(nums,i+2,n,dp) + nums[i];
        int notpick = solve(nums,i+1,n,dp);

        return dp[i] = max(pick,notpick);
    }

    int helper(vector<int>& nums,int n)
    {
        vector<int> dp(n+1,0);
        dp[0] = nums[0]; 
        // dp[1] = max(nums[0],nums[1]);
        for(int i=2;i<n;i++)
        {
            int pick = dp[i-2] + nums[i];
            int notpick = dp[i-1];
            dp[i] = max(pick,notpick);
        }
        return dp[n-1];
    }
    
    int rob(vector<int>& nums) {
        int n = nums.size();
        // vector<int> dp(n+1,-1);
        // return solve(nums,0,n,dp);
        return helper(nums,n);
    }
};
