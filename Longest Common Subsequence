https://leetcode.com/problems/longest-common-subsequence/description/


class Solution {
public:
    int solve(int i,int j,int m,int n,string& s1,string& s2,vector<vector<int>>& dp)
    {
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s1[i]==s2[j]) return dp[i][j] = solve(i+1,j+1,m,n,s1,s2,dp)+1;

        return dp[i][j] = max(solve(i+1,j,m,n,s1,s2,dp),solve(i,j+1,m,n,s1,s2,dp));
    }

    int helper(int m,int n,string &s1,string &s2)
    {
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));

        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(s1[i]==s2[j]) dp[i][j] = dp[i+1][j+1]+1;
                else dp[i][j] = max(dp[i+1][j],dp[i][j+1]);
            }
        }

        return dp[0][0];
    }
    int longestCommonSubsequence(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        // vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        // return solve(0,0,m,n,s1,s2,dp);
        return helper(m,n,s1,s2);
    }
};
