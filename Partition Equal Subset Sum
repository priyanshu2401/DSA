https://leetcode.com/problems/partition-equal-subset-sum/description/


class Solution {
public:
    bool solve(vector<int>& nums,int i,int n,int target,vector<vector<int>>& dp)
    {
        if(i==n && target==0) return true;
        if(i>=n || target<0) return false;
        if(target==0) return true;

        if(dp[i][target]!=-1) return dp[i][target];

        bool pick = solve(nums,i+1,n,target-nums[i],dp);
        bool notpick = solve(nums,i+1,n,target,dp);

        return dp[i][target] = (pick | notpick);
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for(auto &x: nums) sum += x;
        if(sum & 1) return false;
        int target = sum/2;
        vector<vector<int>> dp(n+1,vector<int>(target+1,-1));
        return solve(nums,0,n,target,dp);
    }
};
